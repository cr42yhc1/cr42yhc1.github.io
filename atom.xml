<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cr42y9的仓库</title>
  
  <subtitle>welcome</subtitle>
  <link href="http://blog.hfuiao.top/atom.xml" rel="self"/>
  
  <link href="http://blog.hfuiao.top/"/>
  <updated>2024-02-01T18:00:01.148Z</updated>
  <id>http://blog.hfuiao.top/</id>
  
  <author>
    <name>cr42y9</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>树莓派Raspiberry4B配置电视盒子</title>
    <link href="http://blog.hfuiao.top/2024/01/09/%E6%A0%91%E8%8E%93%E6%B4%BERaspiberry4B%E9%85%8D%E7%BD%AE%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90/"/>
    <id>http://blog.hfuiao.top/2024/01/09/%E6%A0%91%E8%8E%93%E6%B4%BERaspiberry4B%E9%85%8D%E7%BD%AE%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90/</id>
    <published>2024-01-09T13:16:59.000Z</published>
    <updated>2024-02-01T18:00:01.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h2><p>刷入RaspiOS后在树莓派端开启4k硬件加速,之后安装kodi并且在kodi启用iptv</p><h2 id="系统刷入"><a href="#系统刷入" class="headerlink" title="系统刷入"></a>系统刷入</h2><p>选择RaspiOS作为系统刷入TF卡，<a href="https://downloads.raspberrypi.org/raspios_arm64/images/">官方镜像链接</a>另外是官方给出的<a href="https://www.raspberrypi.com/software/">刷入工具</a><br>提一嘴参考教程中没有提到的，由于树莓派有两个miniHDMI输出口，在刷入系统之前一定要先开启SSH，并设定用户名和密码，否则可能需要手动接入键鼠和显示器才能操作。</p><p>通电后查看wifi后台找到树莓派的IP地址然后直接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@ip.to.raspiberry</span><br></pre></td></tr></table></figure><p>输入密码即可登录<br>然后是debian系列常规操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line">apt update</span><br><span class="line">apt dist-upgrade</span><br></pre></td></tr></table></figure><p>之后是开启4K60fps的硬件加速 <a href="https://cloud-atlas.readthedocs.io/zh-cn/latest/arm/raspberry_pi/startup/pi_display_accelerate.html">参考教程</a></p><h2 id="4k硬件加速"><a href="#4k硬件加速" class="headerlink" title="4k硬件加速"></a>4k硬件加速</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libgles2-mesa libgles2-mesa-dev xorg-dev</span><br></pre></td></tr></table></figure><p>之后我们需要在config.txt中的 all 下添加如下配置,config的位置通常在&#x2F;boot&#x2F;config.txt编辑前可以先cp备份一下。</p><p><img src="/images/%E6%A0%91%E8%8E%93%E6%B4%BERaspiberry4B%E9%85%8D%E7%BD%AE%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90/image+20240122123904648.png"></p><p>之后我们reboot机器,等待重启</p><p>重启后依次执行如下指令检查硬件加速是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/device-tree/soc/firmwarekms@7e600000/status</span><br><span class="line">cat /proc/device-tree/v3dbus/v3d@7ec04000/status</span><br></pre></td></tr></table></figure><p>若都返回okay则表示硬件加速开启成功。</p><h2 id="安装Kodi"><a href="#安装Kodi" class="headerlink" title="安装Kodi"></a>安装Kodi</h2><p>这个很简单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install kodi</span><br></pre></td></tr></table></figure><h2 id="配置VNC"><a href="#配置VNC" class="headerlink" title="配置VNC"></a>配置VNC</h2><p>由于手头没有microHDMI线，现在需要先开启vnc进行图形化远程，有线的略过此步骤。<br>RaspiOS自带了VNC-server，开启后，我们需要在windows安装VNC-viewer，<a href="https://www.realvnc.com/en/connect/download/viewer/">官网链接</a>安装后输入树莓派ip以及登录密码即可进行远程连接。</p><h4 id="开启Raspi端的VNC"><a href="#开启Raspi端的VNC" class="headerlink" title="开启Raspi端的VNC"></a>开启Raspi端的VNC</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raspi-config</span><br></pre></td></tr></table></figure><p>之后选择interface option<br><img src="/images/%E6%A0%91%E8%8E%93%E6%B4%BERaspiberry4B%E9%85%8D%E7%BD%AE%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90/image+20240122123921267.png"><img src="/images/%E6%A0%91%E8%8E%93%E6%B4%BERaspiberry4B%E9%85%8D%E7%BD%AE%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90/image+20240122123929222.png"></p><p>选择vnc然后enable，等待生成密钥。<br>开启后需要选择vnc的分辨率，有些教程在advanced options中可以找到resolution,但是新版的RaspiOS更改了resolution的位置，如果你找不到的话，试试 Display options -&gt; VNC Resolution<br>选择你适应的分辨率即可，我是1280*720能用就行。</p><h4 id="电脑连接VNC-server"><a href="#电脑连接VNC-server" class="headerlink" title="电脑连接VNC-server"></a>电脑连接VNC-server</h4><p>电脑端启动vnc-viewer，按照引导连接树莓派即可<br><img src="/images/%E6%A0%91%E8%8E%93%E6%B4%BERaspiberry4B%E9%85%8D%E7%BD%AE%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90/image+20240122123948615.png"></p><h2 id="Kodi配置"><a href="#Kodi配置" class="headerlink" title="Kodi配置"></a>Kodi配置</h2><h4 id="Kodi中文配置"><a href="#Kodi中文配置" class="headerlink" title="Kodi中文配置"></a>Kodi中文配置</h4><p>要配置中文的话，可以下载中文包，但是一定！一定！一定！先把字体设置成arial，不然就是口口世界<br>设置-&gt;界面-&gt;皮肤-&gt;Estuary下面数第四个就是字体<br><img src="/images/%E6%A0%91%E8%8E%93%E6%B4%BERaspiberry4B%E9%85%8D%E7%BD%AE%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90/image+20240122124005822.png"><img src="/images/%E6%A0%91%E8%8E%93%E6%B4%BERaspiberry4B%E9%85%8D%E7%BD%AE%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90/image+20240122124019041.png"></p><p>这个改完再改成中文,别问我为啥图里是中文,我从口口来的。</p><h4 id="Kodi-iptv配置"><a href="#Kodi-iptv配置" class="headerlink" title="Kodi iptv配置"></a>Kodi iptv配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install kodi-pvr-iptvsimple</span><br></pre></td></tr></table></figure><p>重启kodi，我是直接top找到kodi的pid直接kill的，直接点退出好像会卡住<br>重启后问你是否添加插件，选择是<img src="/images/%E6%A0%91%E8%8E%93%E6%B4%BERaspiberry4B%E9%85%8D%E7%BD%AE%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90/image+20240122124040024.png"></p>]]></content>
    
    
    <summary type="html">在树莓派端搭建Kodi电视盒子系统</summary>
    
    
    
    <category term="Linux" scheme="http://blog.hfuiao.top/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://blog.hfuiao.top/tags/Linux/"/>
    
    <category term="树莓派" scheme="http://blog.hfuiao.top/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    <category term="电视盒子" scheme="http://blog.hfuiao.top/tags/%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>DP复习-01背包</title>
    <link href="http://blog.hfuiao.top/2023/09/26/DP%E5%A4%8D%E4%B9%A0-01%E8%83%8C%E5%8C%85/"/>
    <id>http://blog.hfuiao.top/2023/09/26/DP%E5%A4%8D%E4%B9%A0-01%E8%83%8C%E5%8C%85/</id>
    <published>2023-09-26T08:43:48.000Z</published>
    <updated>2024-01-19T04:08:30.378Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.nowcoder.com/questionTerminal/e1bc39c4f2004be3b192f343dac198cd">题目链接</a><br>《挑战程序设计竞赛》P51</p><h3 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">rec</span> <span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> res;</span><br><span class="line"><span class="keyword">if</span> (i == n) &#123;</span><br><span class="line"><span class="comment">//没有物品时</span></span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (j &lt; w[i]) res = <span class="built_in">rec</span>(i + <span class="number">1</span>, j); <span class="comment">//超重时</span></span><br><span class="line"><span class="keyword">else</span> res = <span class="built_in">max</span>(<span class="built_in">rec</span>(i + <span class="number">1</span>, j), <span class="built_in">rec</span>(i + <span class="number">1</span>, j - w[i]) + v[i]); <span class="comment">//尝试搜索放入背包和不放入背包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题是当n很大的时候，会重复计算某些解。因此我们需要一个dp数组来存储这个情况，下一次计算到这个解的时候直接返回，避免重复计算。</p><h3 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="type">int</span> w[maxn], v[maxn];</span><br><span class="line"><span class="type">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rec</span> <span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> res;</span><br><span class="line">    <span class="keyword">if</span> (dp[i][j] &gt;= <span class="number">0</span>) <span class="keyword">return</span> dp[i][j]; <span class="comment">//跳过重复解</span></span><br><span class="line"><span class="keyword">if</span> (i == n) &#123; <span class="comment">//无剩余物品</span></span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (j &lt; w[i]) &#123; <span class="comment">//超过重量上限，舍弃</span></span><br><span class="line">res = <span class="built_in">rec</span>(i + <span class="number">1</span>, j, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> res = <span class="built_in">max</span>(<span class="built_in">rec</span>(i + <span class="number">1</span>, j, n), <span class="built_in">rec</span>(i + <span class="number">1</span>, j - w[i], n) + v[i]);</span><br><span class="line">    <span class="keyword">return</span> dp[i][j] = res；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="built_in">main</span>() &#123;</span><br><span class="line"><span class="type">int</span> n, weight;</span><br><span class="line">cin &gt;&gt; weight &gt;&gt; n;</span><br><span class="line"><span class="built_in">memset</span> (dp, <span class="number">-1</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">memset</span> (w, <span class="number">-1</span>, <span class="built_in">sizeof</span>(w));</span><br><span class="line"><span class="built_in">memset</span> (v, <span class="number">-1</span>, <span class="built_in">sizeof</span>(v));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="built_in">rec</span>(<span class="number">0</span>, weight, n) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是AC代码，其核心思路是<br>特判：</p><ol><li>无剩余物品时， i &#x3D;&#x3D; n时，res &#x3D; 0;因为你没得选了。</li><li>weight上限j低于当前物品的重量时，无法放入背包，你只能舍弃</li></ol><p>剩下的情况就是搜索放入背包或不放入背包。</p><blockquote><p>memset的初始化<br>memset属于#include&lt;cstring&gt;库，切记，防止出现无法使用#include&lt;bits&#x2F;stdc++.h&gt;的情况<br>memset通常只能初始化成0、-1</p></blockquote><h3 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="type">int</span> w[maxn], v[maxn];</span><br><span class="line"><span class="type">int</span> dp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, weight;</span><br><span class="line">cin &gt;&gt; weight &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= weight; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(j &lt; w[i])</span><br><span class="line">dp[i][j] = dp[i + <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">else</span> dp[i][j] = <span class="built_in">max</span>(dp[i + <span class="number">1</span>][j], dp[i + <span class="number">1</span>][j - w[i]] + v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dp[<span class="number">0</span>][weight] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">动态规划的01背包问题复习</summary>
    
    
    
    <category term="算法" scheme="http://blog.hfuiao.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://blog.hfuiao.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="DP" scheme="http://blog.hfuiao.top/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>AB22 岛屿数量 BFS，DFS</title>
    <link href="http://blog.hfuiao.top/2023/09/24/AB22-%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F-BFS%EF%BC%8CDFS/"/>
    <id>http://blog.hfuiao.top/2023/09/24/AB22-%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F-BFS%EF%BC%8CDFS/</id>
    <published>2023-09-24T11:52:53.000Z</published>
    <updated>2024-01-19T04:10:30.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>代码抄的官方题解，给出自己重新手打的版本和自己的理解，重新学习代码。</p><p>题目链接</p><p>输入一组字符，上下左右相邻的1作为一个整体，数出有几个。</p><h1 id="BFS方法"><a href="#BFS方法" class="headerlink" title="BFS方法"></a>BFS方法</h1><h3 id="1-特殊情况"><a href="#1-特殊情况" class="headerlink" title="1. 特殊情况"></a>1. 特殊情况</h3><p>先检测是否是空的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(grid.size() == 0) return 0;</span><br></pre></td></tr></table></figure><h3 id="2-寻找起点"><a href="#2-寻找起点" class="headerlink" title="2. 寻找起点"></a>2. 寻找起点</h3><p>首先通过两个for循环来遍历找到第一个‘1’，用一个队列记录坐标，cnt++表示搜索到一个岛屿。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(&#123;i, j&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-开始bfs"><a href="#3-开始bfs" class="headerlink" title="3. 开始bfs"></a>3. 开始bfs</h3><p>循环当队列为空时跳出</p><p>第一次进入循环时队列中一定只有一个元素，就是搜索起点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> temp = q.<span class="built_in">front</span>() <span class="comment">//得到起点坐标</span></span><br><span class="line"><span class="type">int</span> row = temp.first;</span><br><span class="line"><span class="type">int</span> col = temp.second;</span><br></pre></td></tr></table></figure><p>BFS这个坐标上下左右是否为1，若是，将这个坐标push到队列中，然后将当前的值改为‘0’表示已经搜索过该点。</p><p>之后每次循环都会处理队列中的坐标，以坐标为起点搜索四个方向是否为1重复上述步骤直到队列清空。</p><p>完整代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt; &gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> m = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="comment">//寻找起点</span></span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;i, j&#125;);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    <span class="keyword">auto</span> temp = q.<span class="built_in">front</span>();</span><br><span class="line">                    q.<span class="built_in">pop</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">DFS和BFS的基本思想及代码实现</summary>
    
    
    
    <category term="算法" scheme="http://blog.hfuiao.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://blog.hfuiao.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="搜索" scheme="http://blog.hfuiao.top/tags/%E6%90%9C%E7%B4%A2/"/>
    
    <category term="DFS" scheme="http://blog.hfuiao.top/tags/DFS/"/>
    
    <category term="BFS" scheme="http://blog.hfuiao.top/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>二分查找</title>
    <link href="http://blog.hfuiao.top/2023/09/24/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <id>http://blog.hfuiao.top/2023/09/24/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</id>
    <published>2023-09-24T11:52:53.000Z</published>
    <updated>2024-01-19T04:08:30.478Z</updated>
    
    <content type="html"><![CDATA[<p>二分的思路就是在一个<strong>有序序列</strong>中找到一个目标值的一个搜索算法，先求出序列中间值的位置，比较其和目标值的大小，然后用left和right来确定左右界，思路还是很简单的。<br>left， right， mid的定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int left = 0, right = squence.size() - 1, mid = (left + right) / 2;</span><br></pre></td></tr></table></figure><p>主要要注意一下特殊情况 首先是跳出循环 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while(left &lt;= right)</span><br><span class="line"># 每次变更left使left = mid + 1</span><br><span class="line"># 每次变更right使right = mid - 1</span><br></pre></td></tr></table></figure><p>这样可以保证target不在序列中时程序能正常跳出不会陷入死循环。</p><p>另外是空序列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (squence.size() == 0)</span><br><span class="line">return 0;</span><br></pre></td></tr></table></figure><p>上题目：<br>哎，现在这种题都要看题解了<br><a href="https://www.nowcoder.com/practice/d3df40bd23594118b57554129cadf47b?tpId=308&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/oj?page=1&tab=%25E7%25AE%2597%25E6%25B3%2595%25E7%25AF%2587&topicId=308">牛客链接</a><br>要求找到target值的位置，也就是mid值，空序列和target不在序列中返回-1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line"></span><br><span class="line">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line"></span><br><span class="line">     *</span><br><span class="line"></span><br><span class="line">     *</span><br><span class="line"></span><br><span class="line">     * @param nums int整型vector</span><br><span class="line"></span><br><span class="line">     * @param target int整型</span><br><span class="line"></span><br><span class="line">     * @return int整型</span><br><span class="line"></span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    int search(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line"></span><br><span class="line">        // write code here</span><br><span class="line"></span><br><span class="line">        int left = 0, right = nums.size() - 1;</span><br><span class="line"></span><br><span class="line">        if (nums.size() == 0) return -1;</span><br><span class="line"></span><br><span class="line">        while (left &lt;= right) &#123;</span><br><span class="line"></span><br><span class="line">            int mid = (left + right) / 2;</span><br><span class="line"></span><br><span class="line">            if (nums[mid] == target)</span><br><span class="line"></span><br><span class="line">                return mid;</span><br><span class="line"></span><br><span class="line">            else if (nums[mid] &lt; target)</span><br><span class="line"></span><br><span class="line">                left = mid + 1;</span><br><span class="line"></span><br><span class="line">            else right = mid - 1;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        return -1;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">二分查找的思路以及代码实现</summary>
    
    
    
    <category term="算法" scheme="http://blog.hfuiao.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://blog.hfuiao.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="搜索" scheme="http://blog.hfuiao.top/tags/%E6%90%9C%E7%B4%A2/"/>
    
    <category term="二分" scheme="http://blog.hfuiao.top/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>docker导入本地镜像</title>
    <link href="http://blog.hfuiao.top/2023/04/07/docker%E5%AF%BC%E5%85%A5%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F/"/>
    <id>http://blog.hfuiao.top/2023/04/07/docker%E5%AF%BC%E5%85%A5%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F/</id>
    <published>2023-04-07T11:51:54.000Z</published>
    <updated>2024-01-19T04:08:30.366Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇文章中已经告诉大家如何导出你的镜像了，如果我对导出的镜像不满意，仍然需要修改的话，应该怎么让docker读进去？</p><ol start="0"><li><h5 id="序"><a href="#序" class="headerlink" title="序"></a>序</h5><p>出了点小问题，如下</p><p><img src="/images/docker%E5%AF%BC%E5%85%A5%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F/image-20230407220350876.png" alt="image-20230407220350876"></p></li></ol><p>​问题出在国内源的docker在&#x2F;etc&#x2F;docker&#x2F;daemon.json上，只需要执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/docker/daemon.json /etc/docker/daemon.conf</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start docker.service</span><br></pre></td></tr></table></figure><ol><li><h5 id="准备tar包"><a href="#准备tar包" class="headerlink" title="准备tar包"></a>准备tar包</h5><p>从平台下载，或者来自我们之前打包的tar</p></li><li><h5 id="载入tar"><a href="#载入tar" class="headerlink" title="载入tar"></a>载入tar</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt;path/to/your/tar&gt;</span><br></pre></td></tr></table></figure><p>然后我们使用docker images查看是否成功导入。</p></li><li><h5 id="修改镜像名"><a href="#修改镜像名" class="headerlink" title="修改镜像名"></a>修改镜像名</h5><p>导入后的镜像可能名字很长，并且带有url，这会给我们后面的容器运行带来麻烦，因此我们需要修改一个更简短的镜像名，语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag [source img]:[version] [your img name][version]</span><br></pre></td></tr></table></figure></li><li><h5 id=""><a href="#" class="headerlink" title=""></a></h5></li><li></li><li></li><li></li><li></li></ol>]]></content>
    
    
    <summary type="html">上篇文章中我们讲了如何将docker的镜像导出，如果导出的镜像还需要修改，我们应该怎么做。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>conda环境导出为docker</title>
    <link href="http://blog.hfuiao.top/2023/03/13/conda%E7%8E%AF%E5%A2%83%E5%AF%BC%E5%87%BA%E4%B8%BAdocker/"/>
    <id>http://blog.hfuiao.top/2023/03/13/conda%E7%8E%AF%E5%A2%83%E5%AF%BC%E5%87%BA%E4%B8%BAdocker/</id>
    <published>2023-03-13T08:00:42.000Z</published>
    <updated>2024-01-19T04:08:30.346Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要将平时的环境打包到docker里面，写篇博客记录一下过程省得以后忘。</p><p><del>最开始是问了我的好导师chatgpt，但我发现我的好导师似乎也不是很会，整个过程就是在给我乱讲</del></p><ol><li><p>安装docker</p><p>反正很简单，实在没什么好说的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install docker</span><br></pre></td></tr></table></figure></li><li><p>镜像制作</p><ul><li><p>搜索anaconda镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search anaconda</span><br></pre></td></tr></table></figure></li><li><p>拉取anaconda镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull continuumio/anaconda3</span><br></pre></td></tr></table></figure></li><li><p>为你的镜像创建一个容器</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name &lt;container_name&gt; -idt continuumio/anaconda3</span><br></pre></td></tr></table></figure><p>​例如我要容器名为A，里面装的包是B，命令就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name A -idt B</span><br></pre></td></tr></table></figure><ul><li><p>查找envs的位置，并将conda环境拷贝到docker中</p><p>假如我刚刚的容器名就是pytorch</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker start pytorch</span><br><span class="line">docker exec -it pytorch /bin/bash</span><br></pre></td></tr></table></figure><ul><li>​查看conda的环境位置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure><ul><li>可以查看到环境所在的位置，我的是在&#x2F;opt&#x2F;conda&#x2F;envs下</li></ul><p><img src="/images/conda%E7%8E%AF%E5%A2%83%E5%AF%BC%E5%87%BA%E4%B8%BAdocker/image-20230313165430263.png" alt="image-20230313165430263"></p><!--现在，我将我本机的conda环境复制到里面，你可以先ctrl+D返回到本机环境，我可以分屏所以就不弄了。--><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp &lt;path2ur_envs&gt; pytorch:/opt/conda/envs</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#docker cp /home/iao/anaconda3/envs/pytorch crazy9_pytorch:/opt/conda/envs</span><br></pre></td></tr></table></figure><ul><li>检查docker中是否存在虚拟环境</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate pytorch # pytorch改成你的conda环境名</span><br></pre></td></tr></table></figure><ul><li>将docker打包成镜像</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a &#x27;author&#x27; -m &#x27;instruction&#x27; pytorch pytorch_img</span><br></pre></td></tr></table></figure><ul><li>检查镜像是否存在</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li><p>打包镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o pytorch.tar pytorch_img</span><br></pre></td></tr></table></figure><p>然后你就能在当前目录下看到刚刚打包好的pytorch.tar了。</p></li></ol>]]></content>
    
    
    <summary type="html">将conda环境打包成tar并用docker导入</summary>
    
    
    
    
    <category term="ubuntu" scheme="http://blog.hfuiao.top/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>从零开始配置ubuntu服务器</title>
    <link href="http://blog.hfuiao.top/2022/10/09/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%85%8D%E7%BD%AEubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://blog.hfuiao.top/2022/10/09/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%85%8D%E7%BD%AEubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2022-10-09T07:45:37.000Z</published>
    <updated>2024-01-19T04:08:30.494Z</updated>
    
    <content type="html"><![CDATA[<p>最近新到一台服务器，本来以为搭载好了算力调度的系统，可是仔细想了想这才两张卡怎么调度嘛，开机一看就是个装了ubuntu桌面版的电脑，插上网线开整就行了。</p><p>安装的时候总有些等待的时间，就趁这个空隙记录一下，防止学弟学妹忘了怎么安装。</p><p>我们的目标就是配置好SSH、FTP、Anaconda（cuda开箱的时候已经配置好了就不管了）</p><h2 id="0-准备工作"><a href="#0-准备工作" class="headerlink" title="0. 准备工作"></a>0. 准备工作</h2><p>通电，插网线</p><p>因为是桌面版的ubuntu所以键盘鼠标显示器什么的还是得插上。</p><p>开机</p><p>Ubuntu首次开机有个初始化，跟着配置就行了，很简单</p><p>因为是GPU服务器，开着图形界面肯定占用显存，而且都服务器了要什么界面，直接CTRL+ALT+F2关了</p><h2 id="1-安装SSH"><a href="#1-安装SSH" class="headerlink" title="1. 安装SSH"></a>1. 安装SSH</h2><p>在这部之前你可以先在桌面版的设置里面更换软件源，我比较心急就没换了，设置里面可以自动选择最优的源。</p><p>CTRL+ALT+T打开命令行，进入管理员权限，安装openssh-server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install openssh-server</span><br></pre></td></tr></table></figure><p>安装完成后我们看一下ip地址，首次使用需要安装net-tools</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install net-tools</span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src="/images/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%85%8D%E7%BD%AEubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20221009160015696-16653082359141.png" alt="查看ip地址"></p><p>检查一下openssh是否启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -e | grep ssh # 检查是否启动</span><br><span class="line">sudo service ssh start # 如果没有启动</span><br></pre></td></tr></table></figure><p>启动后，我们在局域网内的其他电脑上远程了连接刚刚的ip就可以了，端口默认22</p><h2 id="2-安装FTP"><a href="#2-安装FTP" class="headerlink" title="2. 安装FTP"></a>2. 安装FTP</h2><p>为了传输文件，通常还要再开个FTP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install vsftpd # 安装</span><br><span class="line">service vsftpd start # 开启vsftpd</span><br><span class="line">service vsftpd status # 查看运行状态</span><br></pre></td></tr></table></figure><p>然后就好了</p><h2 id="3-安装Anaconda"><a href="#3-安装Anaconda" class="headerlink" title="3. 安装Anaconda"></a>3. 安装Anaconda</h2><p>为了控制不同的训练环境，通常需要Anaconda来安装多个虚拟环境，首先下载Anaconda的Linux版，<a href="www.anaconda.com">官网链接</a></p><p><img src="/images/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%85%8D%E7%BD%AEubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20221009170605132-16653082407673.png" alt="选择小企鹅"></p><p><img src="/images/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%85%8D%E7%BD%AEubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20221009170636136-16653082427595.png" alt="选择版本"></p><p>下载完成后，通过FTP传输到服务器</p><p>在服务器找到Anaconda的安装包</p><p><img src="D:\blog\source\images\从零开始配置ubuntu服务器\image-20221009170815961.png" alt="找到Anaconda"></p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh Anaconda3-2022.05-Linux-x86_64.sh </span><br></pre></td></tr></table></figure><p>该yes的时候输入yes，阅读协议啥的直接按q跳过</p><p>安装完以后重启一下服务器就好了</p><p>重启完conda list测试一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda list</span><br></pre></td></tr></table></figure><p>之后就是安装pytorch的虚拟环境了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n env-name python=3.x</span><br><span class="line">conda install pytorch-gpu</span><br></pre></td></tr></table></figure><p>缺啥直接conda install 就行了，玩久了发现也不需要啥教程</p>]]></content>
    
    
    <summary type="html">Ubuntu系统的GPU服务器第一次开机、安装配置成本地服务器、安装虚拟环境</summary>
    
    
    
    <category term="服务器维护日记" scheme="http://blog.hfuiao.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BB%B4%E6%8A%A4%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="服务器" scheme="http://blog.hfuiao.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="linux" scheme="http://blog.hfuiao.top/tags/linux/"/>
    
    <category term="cuda" scheme="http://blog.hfuiao.top/tags/cuda/"/>
    
    <category term="pytorch" scheme="http://blog.hfuiao.top/tags/pytorch/"/>
    
    <category term="深度学习" scheme="http://blog.hfuiao.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu服务器设置挂载点并开机自动挂载</title>
    <link href="http://blog.hfuiao.top/2022/09/30/Ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE%E6%8C%82%E8%BD%BD%E7%82%B9%E5%B9%B6%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD/"/>
    <id>http://blog.hfuiao.top/2022/09/30/Ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE%E6%8C%82%E8%BD%BD%E7%82%B9%E5%B9%B6%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD/</id>
    <published>2022-09-30T03:05:19.000Z</published>
    <updated>2024-01-19T04:08:30.454Z</updated>
    
    <content type="html"><![CDATA[<p>最近服务器硬盘快满了，正好新生也开学一段时间了，几百G的空间肯定是不够用的，索性报了个4T的盘先顶一顶。</p><p>买的希捷的企业盘（本来报的16T到手只有4T了）磁盘的安装每个机子都不一样，就不赘述了。</p><p>到手以后没有螺丝，从上一个盘里拆了两个下来简单固定一下就好了。（jd真的是啥都不送，tb同款送SATA线和很多螺丝，还便宜很多）</p><p>下面我们步入正题</p><h2 id="1-检查磁盘"><a href="#1-检查磁盘" class="headerlink" title="1. 检查磁盘"></a>1. 检查磁盘</h2><p>安装好磁盘后，重启服务器，连接上后输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line">fdisk -l</span><br></pre></td></tr></table></figure><p><img src="/images/Ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE%E6%8C%82%E8%BD%BD%E7%82%B9%E5%B9%B6%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD/image-20220930112749927-16653085439051.png" alt="磁盘状态"></p><p>可以看到我们的sdc已经出现在里面了，但是没有分区，sda和sdb都有对应的分区编号。</p><h2 id="2-创建分区"><a href="#2-创建分区" class="headerlink" title="2. 创建分区"></a>2. 创建分区</h2><p>现在我们为sdc创建分区，依稀记得本科操作系统学过。输入:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sdc </span><br></pre></td></tr></table></figure><p>然后是n新建分区，紧接着输入p，表示主分区，你也可以先按m看一下帮助</p><p><img src="/images/Ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE%E6%8C%82%E8%BD%BD%E7%82%B9%E5%B9%B6%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD/image-20220930134329847-16653085486783.png" alt="详细参数"></p><p>记得最后按w保存（有点像vim捏）</p><h2 id="3-格式化分区并挂载"><a href="#3-格式化分区并挂载" class="headerlink" title="3. 格式化分区并挂载"></a>3. 格式化分区并挂载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/sdc1</span><br></pre></td></tr></table></figure><p><img src="/images/Ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE%E6%8C%82%E8%BD%BD%E7%82%B9%E5%B9%B6%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD/image-20220930134819813-16653085525815.png" alt="创建挂载点"></p><p>懒得想名字了，直接新建一个文件夹在home下，就叫sdc1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/sdc1</span><br><span class="line">mount /dev/sdc1 /home/sdc1</span><br></pre></td></tr></table></figure><p><img src="/images/Ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE%E6%8C%82%E8%BD%BD%E7%82%B9%E5%B9%B6%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD/image-20220930135120879-16653085550067.png" alt="挂载完成"></p><h2 id="4-开启自动挂载"><a href="#4-开启自动挂载" class="headerlink" title="4. 开启自动挂载"></a>4. 开启自动挂载</h2><p>编辑&#x2F;etc&#x2F;fstab</p><p>加入一行 &#x2F;dev&#x2F;sda1    &#x2F;home&#x2F;sdc1  ext4   defaults   0  0</p><p>网上抄的，下次重启生效再更新这篇文章~</p>]]></content>
    
    
    <summary type="html">服务器加装一块新的硬盘后，需要创建分区并且手动挂载，但是每次重启都会解挂，如何自动挂载呢？</summary>
    
    
    
    
    <category term="Linux" scheme="http://blog.hfuiao.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>skeleton数据处理笔记</title>
    <link href="http://blog.hfuiao.top/2022/09/14/skeleton%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.hfuiao.top/2022/09/14/skeleton%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/</id>
    <published>2022-09-14T09:27:15.000Z</published>
    <updated>2024-01-19T04:08:30.430Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做人体骨架方面的工作，参照的论文是2s-AGCN，不过就我现在的知识储备，只能说是对skeleton一窍不通，所以写下这篇笔记记录自己遇到的问题，以及解决过程，希望给自己以及有缘看到这篇博客的人提供帮助。</p><p><strong>附上<a href="https://arxiv.org/abs/1805.07694">论文链接</a>和<a href="https://github.com/lshiwjx/2s-AGCN">代码链接</a></strong></p><p>有些代码GitHub上面写的很清楚，主要探讨一下我工作中遇到的一些小问题。<del>(代码能力不行，遇到的问题都比较弱智)</del></p><h2 id="1-npy-和pkl文件的读取"><a href="#1-npy-和pkl文件的读取" class="headerlink" title="1. npy 和pkl文件的读取"></a>1. npy 和pkl文件的读取</h2><p>gen_data后，生成了若干文件，目录如下，分为.pkl和.npy</p><p><img src="/images/skeleton%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/image-20220914185112534.png" alt="gen_data后的文件"></p><p>注意.npy文件挺大的，直接读取的话非常吃内存。<del>16G还是太小了</del></p><p>读取指定文件的代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">pkl_path = <span class="string">&#x27;path_to_pkl_file&#x27;</span></span><br><span class="line">npy_path = <span class="string">&#x27;path_to_npy_file&#x27;</span></span><br><span class="line"></span><br><span class="line">pkl_data = pickle.load(pkl_path)</span><br><span class="line"><span class="built_in">print</span>(pkl_data)</span><br><span class="line"></span><br><span class="line">npy_data = np.load(npy_path)</span><br><span class="line"><span class="built_in">print</span>(npy_data)</span><br></pre></td></tr></table></figure><p>读取完以后发现其实npy文件没有读的必要，train的话大概是6个G的数组文件，但是pkl是可以视作二维数组，里面第一维是skeleton文件的名称，第二维是skeleton文件对应的label序号(虽然label就是skeleton文件名A后面的数字-1)</p><h2 id="2-关于skeleton数据"><a href="#2-关于skeleton数据" class="headerlink" title="2. 关于skeleton数据"></a>2. 关于skeleton数据</h2><p><img src="/images/skeleton%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/image-20220915125626604.png" alt="skeleton的joint"></p><p>我们知道每个skeleton包括25个joint，分别25个序号表示,文件中为每帧的参数，然后25行数据对应25个节点。这里就不细说了，文件可以直接用pycharm打开，也可以参考这篇文章  <a href="https://blog.csdn.net/weixin_51450749/article/details/111768242">链接</a></p><p><img src="/images/skeleton%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/image-20220923115317445.png" alt="骨架节点按照paris连接"></p><h2 id="3-npy文件的参数"><a href="#3-npy文件的参数" class="headerlink" title="3. npy文件的参数"></a>3. npy文件的参数</h2><p>经过第一步中的文件读取，我们知道.npy文件存的都是矩阵，肉眼直接看是没有任何意义的，我们用np.load读取后，取它的shape</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = np.load(<span class="string">&#x27;../data/&#123;&#125;/&#123;&#125;_data_joint.npy&#x27;</span>.<span class="built_in">format</span>(dataset, <span class="built_in">set</span>))</span><br><span class="line">N, C, T, V, M = data.shape</span><br></pre></td></tr></table></figure><p><strong>其中，N表示视频数量，C表示骨骼点的维度，T表示一个样本所采的帧数这里是300，注意不是样本的帧数，而是预先设定好的值;V表示骨骼点数量，M代表一帧中的人数。详细的解释在<a href="https://github.com/lshiwjx/2s-AGCN/issues/76">这里</a>。（关于C和T的解释来自于<a href="https://zhuanlan.zhihu.com/p/541261773">知乎</a>）</strong></p>]]></content>
    
    
    <summary type="html">近期在进行2s-AGCN的实验，总结了一下目前遇到的问题</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ubuntu下pytorch不支持cuda的修复方案</title>
    <link href="http://blog.hfuiao.top/2022/09/03/ubuntu%E4%B8%8Bpytorch%E4%B8%8D%E6%94%AF%E6%8C%81cuda%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9/"/>
    <id>http://blog.hfuiao.top/2022/09/03/ubuntu%E4%B8%8Bpytorch%E4%B8%8D%E6%94%AF%E6%8C%81cuda%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9/</id>
    <published>2022-09-03T10:11:11.000Z</published>
    <updated>2024-01-19T04:08:30.438Z</updated>
    
    <content type="html"><![CDATA[<p>最近做实验的时候学校的卡又在排队，想想还是本地的服务器好用，结果给我拨错Torch not compiled with CUDA enabled其实就是pytorch版本不支持cuda，也就是说我的pytorch变成cpu版本了，估计是哪天手欠装了requirement然后镜像源里面默认的是cpu版本给我覆盖了。</p><p><img src="/images/ubuntu%E4%B8%8Bpytorch%E4%B8%8D%E6%94%AF%E6%8C%81cuda%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9/image-20220903181157417.png" alt="报错信息"></p><p>首先我们检查一下是不是不支持cuda，先进入python，顺便记一下python的版本，方便后面覆盖。我这里python版本是3.9</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)  <span class="comment"># 查看torch版本号，不看也行</span></span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available())</span><br></pre></td></tr></table></figure><p>pytorch版本号不看也罢，反正cuda这里返回是False，意思也就是我们这个版本的pytorch是不支持GPU的。</p><p><img src="/images/ubuntu%E4%B8%8Bpytorch%E4%B8%8D%E6%94%AF%E6%8C%81cuda%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9/image-20220903181314252.png" alt="检查是否支持cuda"></p><p>那么怎么修？</p><p>答案是直接下个pytorch覆盖回去就行了。</p><p>不过记住，我这个conda源好像是科大的，科大源直接conda install pytorch装的是cpu版本，这也是导致这个事情发生最根本的原因。所以我们需要手动下载GPU版本的pytorch，然后上传到服务器本地安装就可以了。</p><p>在这之前我们需要确定一下cuda的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>我这里是cuda11.6</p><p>打开清华源pytorch的<a href="https://download.pytorch.org/whl/torch/">下载地址</a> 我环境里的1.7.1版本pytorch似乎是不支持11.6版本的cuda的，所以索性换个更高的版本。</p><p>我们直接Ctrl+F搜索cu116就可以找到匹配cuda11.6版本的pytorch，前半部分是torch版本，后半部分是python版本，然后是操作系统，我选择图中倒数第二个，下载然后上传到服务器。</p><p><img src="/images/ubuntu%E4%B8%8Bpytorch%E4%B8%8D%E6%94%AF%E6%8C%81cuda%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9/image-20220904142217823.png" alt="torch版本"></p><p>文件大概1.8G，上传没一会就好了，接着我们本地安装GPU版本的pytorch就大功告成了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install /path/to/pytorch </span><br></pre></td></tr></table></figure><p><img src="/images/ubuntu%E4%B8%8Bpytorch%E4%B8%8D%E6%94%AF%E6%8C%81cuda%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9/image-20220903181455191.png" alt="覆盖安装pytorch"></p><p><img src="/images/ubuntu%E4%B8%8Bpytorch%E4%B8%8D%E6%94%AF%E6%8C%81cuda%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9/image-20220904142853446.png" alt="检查"></p>]]></content>
    
    
    <summary type="html">linux下的Pytorch装成CPU版本，如何切换成GPU版本</summary>
    
    
    
    <category term="linux" scheme="http://blog.hfuiao.top/categories/linux/"/>
    
    
    <category term="cuda" scheme="http://blog.hfuiao.top/tags/cuda/"/>
    
    <category term="pytorch" scheme="http://blog.hfuiao.top/tags/pytorch/"/>
    
    <category term="conda" scheme="http://blog.hfuiao.top/tags/conda/"/>
    
  </entry>
  
  <entry>
    <title>python数据处理(一)</title>
    <link href="http://blog.hfuiao.top/2022/08/26/python%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-%E4%B8%80/"/>
    <id>http://blog.hfuiao.top/2022/08/26/python%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-%E4%B8%80/</id>
    <published>2022-08-26T13:07:57.000Z</published>
    <updated>2024-01-19T04:08:30.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期终于在进行实验工作了，期间肯定是少不了处理数据的，虽然主要工作就是处理数据。目前的工作是在NTU-RGB+D的数据集上进行测试，后期可能也会做PKU-MMD等数据集（效果好的话）</p><p>考虑到我出现的问题实在太多了，肯定有后续，所以这个python数据处理肯定是有下一篇的。。。</p><p>本着代码能执行就不改的原则，我的代码其实并不规范，毕竟在python方面我也就个初学者水平。</p><p>先说一下我们遇到的问题：我自己做了一个NTU-RGB+D的子集，但是要划分x-view和x-sub以及train、test，其实这里搞反了，我提前划分好再做子集就没这么多事了，因为这个折腾了很久。不过本身代码能力就不强，就当还债了<del>（负债累累了属于是）</del></p><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><p>那么我们的思路就是根据其他项目里划分好的数据列表，这里参考<a href="https://github.com/xp-ji/DOGV-ST3D">DOGV</a> ,在这个项目里列表文件的位置是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DOGV-master/configs/NTU_120</span><br><span class="line">DOGV-master/configs/NTU_RGBD</span><br></pre></td></tr></table></figure><p><img src="/images/python%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-%E4%B8%80/image-20220826213040345-166152064255717.png" alt="列表文件"></p><p>先复习一下怎么读文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>)  <span class="comment"># r表示只读</span></span><br></pre></td></tr></table></figure><p>其他参数如下，<a href="https://www.runoob.com/python/python-func-open.html">菜鸟教程</a>抄的<img src="/images/python%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-%E4%B8%80/image-20220826212645656-16615204110401-16615204157093-16615204172735-16615204285377-16615205174429-166152054574513-166152054893815.png" alt="open函数的参数"></p><p>现在文件读进去了，然后我们需要逐行取出文件里面的内容，先看下文件的格式</p><p><img src="/images/python%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-%E4%B8%80/image-20220826213215262.png" alt="列表文件内容"></p><p>我们能看出来，每行由三个部分组成。第一部分是Depth文件的文件名，第二部分是A后面的数-1也就是对应动作的标签，最后一部分是这个文件的总帧数。每个部分用\t也就是制表符隔开。所以想得到文件名，按照depth_utils.py中的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_list_file, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> flp:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> flp.readlines():</span><br><span class="line">flp_line = line.strip(<span class="string">&quot;\n&quot;</span>).split(<span class="string">&quot;\t&quot;</span>)</span><br></pre></td></tr></table></figure><p>按照\n和\t隔开每个部分，flp_line[0]就是我们要的文件名。</p><h2 id="取交集"><a href="#取交集" class="headerlink" title="取交集"></a>取交集</h2><p>看到这里你已经能够读取原始项目中的列表文件了，现在是得到我们自己制作的子集的文件列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">&#x27;path_to_your_dataset&#x27;</span></span><br><span class="line">data_list = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">data_list.append(file)</span><br></pre></td></tr></table></figure><p>ok,现在你得到了两个list，那么我们要怎么取交集呢？</p><p>最简单的办法当然是暴力，但是复杂度太高了，非常浪费时间，而且非常不优雅。</p><p>python中当然是可以直接取交集的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data_list = []  <span class="comment"># 你的列表</span></span><br><span class="line">file_list =[]  <span class="comment"># 别人的列表</span></span><br><span class="line">inter_list = <span class="built_in">list</span>(<span class="built_in">set</span>(data_list).intersection(<span class="built_in">set</span>(file_list)))  <span class="comment"># 取交集</span></span><br></pre></td></tr></table></figure><p>这样就可以把交集的结果保存到inter_list里了，为了保险，建议在这步操作执行后看一下inter_list里的内容</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>根据上面的操作你已经可以得到自己的x-view和x-sub了，但是我还有个担心的地方，就是有没有一种可能，我取完交集后，生成的两个文件是一样的？我们需要验证两个文件是否相同，你可以同时打开两个文件然后readlines逐行比较，但是十分不优雅，直接这么做的人肯定也不会上网搜博客了。</p><p>我们引入filecmp这个库，一看名字就知道是file compare，执行后返回一个bool值，我们直接放if里，如果返回1表示两个文件相同，那么我们打印 “坏了”，表示你这俩文件一样，当然如果不一样则打印“好了”表示  那没事了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> filecmp</span><br><span class="line"><span class="keyword">if</span> filecmp.cmp(<span class="string">&#x27;x-view.txt&#x27;</span>, <span class="string">&#x27;x-sub.txt&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;坏了&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;好了&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">python读取文件、list取交集、验证文件是否相同</summary>
    
    
    
    <category term="深度学习" scheme="http://blog.hfuiao.top/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="基本操作" scheme="http://blog.hfuiao.top/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
    <category term="数据处理" scheme="http://blog.hfuiao.top/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>回顾处理图像梯度中遇到的一些问题</title>
    <link href="http://blog.hfuiao.top/2022/08/11/%E5%9B%9E%E9%A1%BE%E5%A4%84%E7%90%86%E5%9B%BE%E5%83%8F%E6%A2%AF%E5%BA%A6%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.hfuiao.top/2022/08/11/%E5%9B%9E%E9%A1%BE%E5%A4%84%E7%90%86%E5%9B%BE%E5%83%8F%E6%A2%AF%E5%BA%A6%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</id>
    <published>2022-08-11T11:51:29.000Z</published>
    <updated>2024-01-19T04:08:30.502Z</updated>
    
    <content type="html"><![CDATA[<p>近期在做一些处理图像的工作，由于代码能力太弱，基本上都是在给以前摸鱼还债。主要是计算图像的梯度。需要处理一些视频序列，本文用于记录一些细节知识，就当是给以前还债，防止以后忘记。</p><h2 id="图像中梯度的概念"><a href="#图像中梯度的概念" class="headerlink" title="图像中梯度的概念"></a>图像中梯度的概念</h2><p>对于我这种数学不怎么好的人来说，我对梯度的理解就是求导，什么HOG一些概念我只是听过，看到的时候就是，反正之前学过，但是没有什么印象，所以下面我们一起来学习一下：</p><p>首先，高等(zhong)数学里就有，一维函数的微分表示为<br>$$<br>\frac{\partial f}{\partial x}&#x3D;\lim\limits_{\Delta x\to 0} \frac{f(x+\Delta x) - f(x)}{\Delta x}<br>$$<br>但是众所周知，图像是二位的，我们把图像看作是一个二维数组，每个像素对应数组中相应位置的一个值，如果我们要对二维矩阵求梯度，就会出现偏微分，因此存在x方向和y方向的梯度，我们需要知道偏微分的定义。<br>$$<br>\frac{\partial f(x,y)}{\partial x}&#x3D;\lim\limits_{\epsilon \to 0} \frac{f(x + \epsilon,y)-f(x, y)}{\epsilon}<br>$$</p><p>$$<br>\frac{\partial f(x,y)}{\partial y}&#x3D;\lim\limits_{\epsilon \to 0} \frac{f(x,y+\epsilon)-f(x, y)}{\epsilon}<br>$$</p><p>以上是二元函数中x,y偏微分的定义,当来到图像中时,$\epsilon$不可能无限小,因此我们规定成1个pixel.现在给定img[i,j]表示图像所在第i行第j列的值,图像img在y方向的梯度表示为$imgdy &#x3D; \frac{img(i+1,j)-img(i,j)}{2} $,x方向梯度表示为$imgdx &#x3D; \frac{img[i,j+1]-img[i,j]}{2}$ </p><p>其实际表现为图像在x或y方向的变化情况,从上面的式子很容易看出,例如在x方向,我们用后一列的像素值减去前一列的像素值,倘若图像中两处颜色相近,那么减出来的数就非常接近0,在二值图中就越黑,若差值越大,则越亮</p><p><img src="/image-20220811195824592.png" alt="从左至右依次是gx,gy和原始图像"></p><p>这是一张我偶然在学校里拍到兔子的画面,因为兔子的颜色和草地颜色差距不大,在梯度图上很难找到,但是从眼前的树干能看出,x方向的光线投射在上面,gx图像上就有很明显的白色线条</p><h2 id="python中的图像梯度"><a href="#python中的图像梯度" class="headerlink" title="python中的图像梯度"></a>python中的图像梯度</h2><p>解决了这个问题后,我们看一下代码是怎么实现的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">path = <span class="string">&#x27;./rabbit.jpg&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradient</span>(<span class="params">img</span>):</span><br><span class="line">    <span class="comment"># 计算x，y方向的梯度</span></span><br><span class="line">    gx = cv2.Sobel(img, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, ksize=<span class="number">1</span>)</span><br><span class="line">    gy = cv2.Sobel(img, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, ksize=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> gx, gy</span><br><span class="line"></span><br><span class="line">img = cv2.imread(path)</span><br><span class="line">img = cv2.resize(img, (<span class="number">480</span>, <span class="number">640</span>))</span><br><span class="line"></span><br><span class="line">gx, gy = gradient(img)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;gx&#x27;</span>, gx)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;gy&#x27;</span>, gy)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;origin&#x27;</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>代码中使用了sobel算子,具体解释<a href="https://zhuanlan.zhihu.com/p/67197912">点击这里</a></p><h2 id="单通道图像问题"><a href="#单通道图像问题" class="headerlink" title="单通道图像问题"></a>单通道图像问题</h2><p>在我可以获得图像x和y方向的梯度后,我发现,我处理的图像不需要RGB信息,只需要是单通道,但是经过处理后我又得到三个通道(<del>奇怪的要求</del>)</p><h3 id="1-单通道图像的获得"><a href="#1-单通道图像的获得" class="headerlink" title="1. 单通道图像的获得"></a>1. 单通道图像的获得</h3><p>cv2.imread默认将图片读取成RGB三通道<del>之前在这里浪费了好久转换成单通道图片然后又给读成三通道</del></p><p>我们要确定我们现在的图像的通道数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">path = <span class="string">&#x27;./rabbit.jpg&#x27;</span></span><br><span class="line">img = cv2.imread(path)</span><br><span class="line">img = cv2.resize(img, (<span class="number">640</span>, <span class="number">480</span>))</span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br></pre></td></tr></table></figure><p>这里输出是(480, 640, 3),这里3肯定就是通道数了,如何得到单通道图像呢?</p><p>我们只需要在cv2.imread的时候加一项参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(path, cv2.IMREAD_GRAYSCALE)</span><br></pre></td></tr></table></figure><p>这样原始图像的灰度图就存到img里了.</p><h3 id="2-三个通道合并"><a href="#2-三个通道合并" class="headerlink" title="2. 三个通道合并"></a>2. 三个通道合并</h3><p>经过我的处理,我将一个单通道的图像变成了3张图像,合成方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.merge([img_a, img_b, img_c])</span><br></pre></td></tr></table></figure><p>注意img_a,img_b,img_c都是单通道图像,但是在cv2.merge中是按照B.G.R.的顺序输入的,a,b,c三张图像的每一个值都分别代表Blue,Green,Red的值作为输入,合并后变成一张彩色图像.</p>]]></content>
    
    
    <summary type="html">近期在处理图像梯度时遇到的问题,包括通道合并,梯度处理</summary>
    
    
    
    <category term="深度学习" scheme="http://blog.hfuiao.top/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="http://blog.hfuiao.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="基础知识" scheme="http://blog.hfuiao.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Numpy报错numpy.ndarray size changed</title>
    <link href="http://blog.hfuiao.top/2022/07/29/Numpy%E6%8A%A5%E9%94%99numpy.ndarray-size-changed/"/>
    <id>http://blog.hfuiao.top/2022/07/29/Numpy%E6%8A%A5%E9%94%99numpy.ndarray-size-changed/</id>
    <published>2022-07-29T02:15:36.000Z</published>
    <updated>2024-01-19T04:08:30.406Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Numpy%E6%8A%A5%E9%94%99numpy.ndarray-size-changed/image-20220729094843665.png" alt="报错信息"></p><p>学习pyskl的时候遇到的一些小问题，出现了numpy.ndarray size的问题，把下方的代码注释了以后仍然有问题，那么初步断定不是代码的错了，应该的导包的时候出现了包不兼容或者版本问题。一开始以为是什么大问题，本地执行没有问题，但是到服务器就不行了，想着服务器大家都在用，就懒得管了。</p><p>查了一下果然是因为numpy版本比较老不兼容，手动升级一下就行了。进入虚拟环境以后执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade numpy</span><br></pre></td></tr></table></figure><p>之后重启jupyter notebook即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line">lsof -i:8888 # 得到PID</span><br><span class="line">kill -9 [PID] # kill jupyter notebook</span><br><span class="line">jupyter notebook --allow-root --ip=&#x27;0.0.0.0&#x27;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">numpy版本不兼容报错问题的解决</summary>
    
    
    
    <category term="深度学习" scheme="http://blog.hfuiao.top/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="基本操作" scheme="http://blog.hfuiao.top/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
    <category term="jupyter" scheme="http://blog.hfuiao.top/tags/jupyter/"/>
    
    <category term="numpy" scheme="http://blog.hfuiao.top/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter安装并添加虚拟环境</title>
    <link href="http://blog.hfuiao.top/2022/07/26/2022-07-26-Jupyter%E5%AE%89%E8%A3%85%E5%B9%B6%E6%B7%BB%E5%8A%A0%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>http://blog.hfuiao.top/2022/07/26/2022-07-26-Jupyter%E5%AE%89%E8%A3%85%E5%B9%B6%E6%B7%BB%E5%8A%A0%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</id>
    <published>2022-07-26T09:05:26.000Z</published>
    <updated>2024-01-19T04:08:30.310Z</updated>
    
    <content type="html"><![CDATA[<p>近日闲来无事，有一篇论文里面用了jupyter notebook做一些演示，正好电脑里面没装，可是转念一想，干脆装服务器里得了。服务器是Ubuntu 20.04，因为实验室的同学都在用，想着还是给大家装一下吧。</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure><p>pip如果需要换源的话，先执行下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.pip</span><br><span class="line">vim ~/.pip/pip.conf</span><br></pre></td></tr></table></figure><p>然后按i进入insert模式插入以下文字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple</span><br></pre></td></tr></table></figure><p>然后esc退出insert模式:wq保存并退出</p><p>如果你是windows用户：</p><p>在C:&#x2F;user&#x2F;xxx&#x2F;pip&#x2F;pip.ini文件下输入上述内容即可，xxx是你的用户名</p><p>pip或者pip.ini没有的话自己新建。</p><p>另外如果你需要配置代理，在index-url下再加一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy = http://x.x.x.x:xx</span><br></pre></td></tr></table></figure><h3 id="2-直接打开"><a href="#2-直接打开" class="headerlink" title="2. 直接打开"></a>2. 直接打开</h3><p>我的操作比较简单粗暴，直接执行jupyter notebook就可以看到url了，如果是使用个人电脑的话直接复制url打开浏览器就可以访问了，但是我们是服务器，我们没有图形化界面，因此我们的连接都是远程访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --allow-root --ip=&#x27;0.0.0.0&#x27;</span><br></pre></td></tr></table></figure><p>因为是在root下执行的，要多加一个指令，0.0.0.0表示接受所有连接。</p><p>jupyter是默认使用8888端口的，因此你在连接之前需要在防火墙打开8888端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow 8888</span><br></pre></td></tr></table></figure><p>然后在浏览器输入服务器的ip:8888&#x2F;?token&#x3D; 就可以打开了，记得复制一下token，开启界面以后需要用token修改密码。</p><h3 id="3-加入虚拟环境"><a href="#3-加入虚拟环境" class="headerlink" title="3. 加入虚拟环境"></a>3. 加入虚拟环境</h3><p>步骤很简单，首先要激活你的conda环境，然后安装ipykernel</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda activate name # name=你虚拟环境的名字</span><br><span class="line">pip install ipykernel</span><br><span class="line">python -m ipykernel install --name name</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">服务器端安装Jupyter并加入自己的虚拟环境</summary>
    
    
    
    <category term="深度学习" scheme="http://blog.hfuiao.top/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Jupyter" scheme="http://blog.hfuiao.top/tags/Jupyter/"/>
    
    <category term="服务器" scheme="http://blog.hfuiao.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="pip换源" scheme="http://blog.hfuiao.top/tags/pip%E6%8D%A2%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter安装并添加虚拟环境</title>
    <link href="http://blog.hfuiao.top/2022/07/26/Jupyter%E5%AE%89%E8%A3%85%E5%B9%B6%E6%B7%BB%E5%8A%A0%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>http://blog.hfuiao.top/2022/07/26/Jupyter%E5%AE%89%E8%A3%85%E5%B9%B6%E6%B7%BB%E5%8A%A0%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</id>
    <published>2022-07-26T09:05:26.000Z</published>
    <updated>2024-01-19T04:08:30.398Z</updated>
    
    <content type="html"><![CDATA[<p>近日闲来无事，有一篇论文里面用了jupyter notebook做一些演示，正好电脑里面没装，可是转念一想，干脆装服务器里得了。服务器是Ubuntu 20.04，因为实验室的同学都在用，想着还是给大家装一下吧。</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure><p>pip如果需要换源的话，先执行下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.pip</span><br><span class="line">vim ~/.pip/pip.conf</span><br></pre></td></tr></table></figure><p>然后按i进入insert模式插入以下文字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple</span><br></pre></td></tr></table></figure><p>然后esc退出insert模式:wq保存并退出</p><p>如果你是windows用户：</p><p>在C:&#x2F;user&#x2F;xxx&#x2F;pip&#x2F;pip.ini文件下输入上述内容即可，xxx是你的用户名</p><p>pip或者pip.ini没有的话自己新建。</p><p>另外如果你需要配置代理，在index-url下再加一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy = http://x.x.x.x:xx</span><br></pre></td></tr></table></figure><h3 id="2-直接打开"><a href="#2-直接打开" class="headerlink" title="2. 直接打开"></a>2. 直接打开</h3><p>我的操作比较简单粗暴，直接执行jupyter notebook就可以看到url了，如果是使用个人电脑的话直接复制url打开浏览器就可以访问了，但是我们是服务器，我们没有图形化界面，因此我们的连接都是远程访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --allow-root --ip=&#x27;0.0.0.0&#x27;</span><br></pre></td></tr></table></figure><p>因为是在root下执行的，要多加一个指令，0.0.0.0表示接受所有连接。</p><p>jupyter是默认使用8888端口的，因此你在连接之前需要在防火墙打开8888端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow 8888</span><br></pre></td></tr></table></figure><p>然后在浏览器输入服务器的ip:8888&#x2F;?token&#x3D; 就可以打开了，记得复制一下token，开启界面以后需要用token修改密码。</p><h3 id="3-加入虚拟环境"><a href="#3-加入虚拟环境" class="headerlink" title="3. 加入虚拟环境"></a>3. 加入虚拟环境</h3><p>步骤很简单，首先要激活你的conda环境，然后安装ipykernel</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda activate name # name=你虚拟环境的名字</span><br><span class="line">pip install ipykernel</span><br><span class="line">python -m ipykernel install --name name</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">服务器端安装Jupyter并加入自己的虚拟环境</summary>
    
    
    
    <category term="深度学习" scheme="http://blog.hfuiao.top/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Jupyter" scheme="http://blog.hfuiao.top/tags/Jupyter/"/>
    
    <category term="服务器" scheme="http://blog.hfuiao.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="pip换源" scheme="http://blog.hfuiao.top/tags/pip%E6%8D%A2%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>IOS-Android-Windows-Ubuntu通过某些软件访问学术网站</title>
    <link href="http://blog.hfuiao.top/2022/07/25/IOS-Android-Windows-Ubuntu%E9%80%9A%E8%BF%87%E6%9F%90%E4%BA%9B%E8%BD%AF%E4%BB%B6%E8%AE%BF%E9%97%AE%E5%AD%A6%E6%9C%AF%E7%BD%91%E7%AB%99/"/>
    <id>http://blog.hfuiao.top/2022/07/25/IOS-Android-Windows-Ubuntu%E9%80%9A%E8%BF%87%E6%9F%90%E4%BA%9B%E8%BD%AF%E4%BB%B6%E8%AE%BF%E9%97%AE%E5%AD%A6%E6%9C%AF%E7%BD%91%E7%AB%99/</id>
    <published>2022-07-25T03:12:12.000Z</published>
    <updated>2024-01-19T04:08:30.386Z</updated>
    
    <content type="html"><![CDATA[<p>当我们处于校园网环境时，有时候一些供我们学习的网站例如Github，StackOverflow，甚至我看论文上IEEE、arxiv连接都十分不稳定，经常出现打不开的情况，但是当我们把网络切换成数据流量的时候，一切又变得正常了，这似乎已经可以解决问题了。但是我用的是台式机啊，使用数据流量十分不方便，我需要手机下载好这些东西以后再用“小而美”软件以极慢的速度传到电脑，还不能超过500M，设想一下，如果我要配置ImageNet2012数据集(150G)那这几乎是不可能的了。</p><p>那么我们要如何解决这种问题呢？</p><p><strong>注意：本教程只讨论访问学术网站的节点，一切法律禁止的网站本站不提供教程。</strong></p><h1 id="Windows端-Ubuntu"><a href="#Windows端-Ubuntu" class="headerlink" title="Windows端&#x2F;Ubuntu"></a>Windows端&#x2F;Ubuntu</h1><p>建议下载clash for windows<a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">下载链接</a></p><ol><li><p>选择对应的版本，有linux版本。</p><p><img src="/images/IOS-Android-Windows-Ubuntu%E9%80%9A%E8%BF%87%E6%9F%90%E4%BA%9B%E8%BD%AF%E4%BB%B6%E8%AE%BF%E9%97%AE%E5%AD%A6%E6%9C%AF%E7%BD%91%E7%AB%99/win1.png" alt="下载页面"></p></li><li><p>解压后，在首页导入你的节点</p></li></ol><p><img src="/images/IOS-Android-Windows-Ubuntu%E9%80%9A%E8%BF%87%E6%9F%90%E4%BA%9B%E8%BD%AF%E4%BB%B6%E8%AE%BF%E9%97%AE%E5%AD%A6%E6%9C%AF%E7%BD%91%E7%AB%99/win%E5%AF%BC%E5%85%A5.png" alt="clash链接导入"></p><ol start="3"><li>最后在clash首页配进行如图所示的配置</li></ol><p><img src="/images/IOS-Android-Windows-Ubuntu%E9%80%9A%E8%BF%87%E6%9F%90%E4%BA%9B%E8%BD%AF%E4%BB%B6%E8%AE%BF%E9%97%AE%E5%AD%A6%E6%9C%AF%E7%BD%91%E7%AB%99/clash%E9%85%8D%E7%BD%AE.png" alt="clash客户端配置"></p><h1 id="IOS端"><a href="#IOS端" class="headerlink" title="IOS端"></a>IOS端</h1><p>首先你已经有🚀或者IOS版的🐱了，没有的话自己下一个。</p><h4 id="1-🐱"><a href="#1-🐱" class="headerlink" title="1. 🐱"></a>1. 🐱</h4><p>在clash链接里选择复制链接，到stash&gt;设置&gt;配置文件&gt;从URL下载&gt;粘贴</p><h4 id="2-🚀"><a href="#2-🚀" class="headerlink" title="2.🚀"></a>2.🚀</h4><p>🚀订阅一键导入</p><p>​</p><h1 id="Andriod端"><a href="#Andriod端" class="headerlink" title="Andriod端"></a>Andriod端</h1><h4 id="1-获取应用"><a href="#1-获取应用" class="headerlink" title="1.  获取应用"></a>1.  获取应用</h4><p>安卓手机用户可以选择使用 V2rayNG 或者 Clash 作为客户端。<br>Clash for Android 是基于 Clash Core 完成的 Android 应用程序。</p><p>优点：</p><ul><li><strong>可切换代理模式以及节点</strong></li><li><strong>支持节点批量测试延迟</strong></li><li><strong>方便使用</strong></li></ul><p><a href="https://github.com/2dust/v2rayNG/releases/">下载V2rayNG</a></p><p>选择最新版本的Asset，一般来说下载第一个apk文件就可以了。</p><h4 id="2-导入链接"><a href="#2-导入链接" class="headerlink" title="2. 导入链接"></a>2. 导入链接</h4><p>首先打开软件，点击左上角的三个横杠，点击订阅设置选项</p><img src="/images/IOS-Android-Windows-Ubuntu通过某些软件访问学术网站/android1.jpg" alt="点击订阅设置" style="zoom:50%;" /><p>进入后点击右上角加号</p><img src="/images/IOS-Android-Windows-Ubuntu通过某些软件访问学术网站/android2.jpg" alt="点击加号" style="zoom:50%;" /><p>将官网的一键订阅链接复制到url处保存</p><img src="/images/IOS-Android-Windows-Ubuntu通过某些软件访问学术网站/android3.jpg" alt="输入url" style="zoom:50%;" /><p>返回app主界面后，点击右上角的三个点，选择更新订阅即可，如果更新失败请先断开所有节点的连接。</p><img src="/images/IOS-Android-Windows-Ubuntu通过某些软件访问学术网站/android4.jpg" alt="更新订阅" style="zoom:50%;" />]]></content>
    
    
    <summary type="html">校园网环境总会莫名其妙的禁止一些学术网站的连接</summary>
    
    
    
    <category term="基本操作" scheme="http://blog.hfuiao.top/categories/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
    
    <category term="基本操作" scheme="http://blog.hfuiao.top/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>神经网络中关于能量函数的简明理解</title>
    <link href="http://blog.hfuiao.top/2022/07/22/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E5%85%B3%E4%BA%8E%E8%83%BD%E9%87%8F%E5%87%BD%E6%95%B0%E7%9A%84%E7%AE%80%E6%98%8E%E7%90%86%E8%A7%A3/"/>
    <id>http://blog.hfuiao.top/2022/07/22/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E5%85%B3%E4%BA%8E%E8%83%BD%E9%87%8F%E5%87%BD%E6%95%B0%E7%9A%84%E7%AE%80%E6%98%8E%E7%90%86%E8%A7%A3/</id>
    <published>2022-07-22T05:27:18.000Z</published>
    <updated>2024-01-19T04:08:30.514Z</updated>
    
    <content type="html"><![CDATA[<hr><p>近期在阅读论文的过程中再次出现了关于 “能量” 的定义,本身已经逃避基础定义很久的我决定回到这些基础工作中,把定义吃透.</p><p>首先我们知道熵和能量，最少知道这两个词。我们从最基本的原理开始讲:</p><p>大家都知道,熵是表示系统混乱程度的一个概念,举一个教科书上的例子:在我们买来一副扑克牌的时候,这副牌是分好类的,按照花色、数字排序,那么这个时候,”扑克牌”这个系统的熵我们认为它处于一个很低的状态.熵低的时候这副扑克牌肯定是不饿能玩的,因此我们要把这副牌打乱,这个时候”扑克牌”这个系统的混乱程度增加了,因此熵也增加了,而随着我们玩的越来越多,扑克牌之间的顺序越来越乱,越来越没有规律,因此熵越来越高,这就是熵增的过程.</p><p>现在我们将某个范围待聚类的若干元素看成一个系统,元素之间的相异程度视为能量,那么不同类别之间的能量就越大,同类别的元素间能量越小.当我们的系统中,不断的有不同类别的元素加入进来,能量就会增大,当这些能量超过一个固定的阈值后,这些元素就要重新聚类</p><p><img src="/../images/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E5%85%B3%E4%BA%8E%E8%83%BD%E9%87%8F%E5%87%BD%E6%95%B0%E7%9A%84%E7%AE%80%E6%98%8E%E7%90%86%E8%A7%A3/%E8%83%BD%E9%87%8F.png" alt="能量"></p><p>为什么要重新聚类呢?因为能量与熵之间的关系是呈反比的.根据熵增定律,熵越大能量就越小,因此在重新聚类后系统内的能量更小,能量越小就越稳定.</p><p>在这些理解后,我们大概明白了为什么要对能量最小化了.<br>$$<br>e_t&#x3D;\frac{4(\hat\sigma^2+\lambda)}{(t-\hat\mu)^2+2\hat\sigma^2+2\lambda}<br>$$<br>其中 $\hat\mu&#x3D;\frac{1}{N}\sum_{i&#x3D;1}^{N}x_i$,其实就是均值，$\hat\sigma^2&#x3D;\frac{1}{N}\sum^{N}_{i&#x3D;1}(x_i-\hat\mu)^2$也就是方差;$\lambda$是超参数,$N$是channel中的neuron数量.</p>]]></content>
    
    
    <summary type="html">从熵和能量理解神经网络中能量函数的概念</summary>
    
    
    
    <category term="深度学习" scheme="http://blog.hfuiao.top/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="http://blog.hfuiao.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="基础知识" scheme="http://blog.hfuiao.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>deepin配置Qv2ray及插件安装简明教程</title>
    <link href="http://blog.hfuiao.top/2022/07/21/deepin%E9%85%8D%E7%BD%AEQv2ray%E5%8F%8A%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%B0%8F%E7%99%BD%E6%95%99%E7%A8%8B/"/>
    <id>http://blog.hfuiao.top/2022/07/21/deepin%E9%85%8D%E7%BD%AEQv2ray%E5%8F%8A%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%B0%8F%E7%99%BD%E6%95%99%E7%A8%8B/</id>
    <published>2022-07-21T03:50:14.000Z</published>
    <updated>2024-01-19T04:08:30.350Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章中详细描述了我安装deepin系统的过程以及踩到的雷，对我们这行这玩意还是挺需要的，都是学习用，不做违法乱纪的事。下面分享一下配置qv2ray的经验和大家交流。</p><p><strong>总步骤：下载qv2ray软件，安装v2ray内核及插件。</strong></p><ol><li><p>下载软件，可以在商店下载，但是版本似乎跟不上，下面附上<a href="https://github.com/Qv2ray/QvPlugin-Trojan/releases/tag/v3.0.0-pre3">github链接</a><strong>注意插件也在这里下载。</strong></p></li><li><p>之后是<a href="https://github.com/v2fly/v2ray-core/releases">下载内核</a></p></li><li><p>完成后解压内核文件，并将这四个文件的属性打开，如图</p><p><img src="https://img-blog.csdnimg.cn/20210618183747794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NrY3Jhenk5,size_16,color_FFFFFF,t_70#pic_center" alt="选择允许以程序运行"></p><p>然后将它们复制到文件夹&#x2F;home&#x2F;你的用户名&#x2F;.config&#x2F;qv2ray&#x2F;vcore 下，如果进不去.config可以通过这个方法：运行qv2ray-&gt;插件-&gt;打开本地插件目录就进入了。之后的插件要复制进&#x2F;.config&#x2F;qv2ray&#x2F;plugins里面后，重启v2ray即可运行。</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20210618184450468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NrY3Jhenk5,size_16,color_FFFFFF,t_70#pic_center" alt="进入.config"></p><p>剩下就是你自己配置啦，自己导入节点开始上网吧。</p>]]></content>
    
    
    <summary type="html">在deepin下配置Qv2ray的过程以及torjan一类插件的安装</summary>
    
    
    
    <category term="linux" scheme="http://blog.hfuiao.top/categories/linux/"/>
    
    
    <category term="linux" scheme="http://blog.hfuiao.top/tags/linux/"/>
    
    <category term="deepin" scheme="http://blog.hfuiao.top/tags/deepin/"/>
    
    <category term="qv2ray" scheme="http://blog.hfuiao.top/tags/qv2ray/"/>
    
  </entry>
  
  <entry>
    <title>win-deepin双系统安装及输入密码后开机黑屏解决方案</title>
    <link href="http://blog.hfuiao.top/2022/07/21/win-deepin%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%8F%8A%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E5%90%8E%E5%BC%80%E6%9C%BA%E9%BB%91%E5%B1%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%B0%8F%E7%99%BD%E6%95%99%E7%A8%8B/"/>
    <id>http://blog.hfuiao.top/2022/07/21/win-deepin%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%8F%8A%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E5%90%8E%E5%BC%80%E6%9C%BA%E9%BB%91%E5%B1%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%B0%8F%E7%99%BD%E6%95%99%E7%A8%8B/</id>
    <published>2022-07-21T03:32:14.000Z</published>
    <updated>2024-01-19T04:08:30.466Z</updated>
    
    <content type="html"><![CDATA[<p>第一次做双系统，尤其是Deepin比较特殊，遇到了一些不太常见的问题，做此笔记防止日后遇到同样的问题，也希望能帮到读者。因为全程没有截屏，只能凭借记忆和文字来描述。</p><h3>第一步:windows下分盘</h3>我是装机小白，在这里遇到的问题卡了我很久，搜问题的方式也不太对，很长一段时间都没有搜索到正确的解决方案，我的硬盘是SSD128G+机械1T。分盘：计算机->管理->磁盘管理 里面分出100G的空间（反正我是这么分的），但是这里要注意硬盘的状态和格式，此前我的硬盘是动态硬盘，进入deepin引导后检测不到我分出的100G，只能搜索到931G（1T）的机械硬盘和128G的SSD。<p><strong>原因似乎是因为deepin无法检测到动态盘的分区</strong><br>硬要安装也没事，也就是把整个机械格了。但是我分那100G干嘛呢？<br><strong>解决方案：下载傲梅分区助手，运行动态硬盘转换器，如果让你重启点否，运行程序很快就好了，数据也不会删除。</strong></p><p>然后硬盘就变成基本硬盘了，之后再进入引导就可以检测到我们分的100G空间。注意：在动态硬盘下分出的100G是“未分配”，而换成基本以后是“可用空间”。然而问题并没有解决，在即将安装的时候检测到我们的硬盘是MBR格式，需要关闭UEFI，然而关闭UEFI启动每台电脑似乎都不一样，而我套用各种方法都没有成功，<br><strong>解决方案：我从“MBR格式”这句话入手，下载DiskGenius，将硬盘格式转换为GPT格式即可进行安装。</strong><br>总结一下第一步需要做的事：分区、检查磁盘的格式和状态（最好是能关闭UEFI启动）。</p><h3>第二步：安装系统盘</h3>系统盘安装工具用deepin官网给的工具就可以了，我刚开始遇到的各种问题，每篇博客都用不一样的软件，我都下了个遍，结果根本不是安装软件的问题，所以大家相信官方就好。过程很简单，准备个8G以上的U盘就行了，里面数据都备份好，运行工具等着就行了。这一步很轻松。<h3>第三步：开始装系统</h3>刚刚第一步基本上把问题都解释完了，在解决了之前问题的情况下就可以开始装系统了。<ul><li>首先进BIOS（每台电脑不一样，搜一下型号+BIOS即可），然后关闭在boot标签页下fast boot改为disable，然后将启动项改为u盘启动（这步可能解释的比较简单，其他blog写的很详细。）F10保存后不一会就会进入选择界面（默认第一个，我选的第二个，因为第一个老打不开，总之就是怪怪的，大家没啥毛病就选第一个吧）</li><li>之后是选择语言，简中，点击我已阅读，下一步。到这里是选择安装的盘，可以看到我们分的100G，鼠标 放上去右边有小图标，是对这100G进行细分的，具体方案参照：<a><a href="https://bbs-next.deepin.org/post/197659">https://bbs-next.deepin.org/post/197659</a></a>写的非常好很详细，我整个过程就是照着它抄的，不过还是遇到很多这篇文章没有遇到的问题，因此写下这篇文章帮助自己也帮助大家。</li><li><h1 id="最后就是等待安装成功了，时间差不多该饮茶了。"><a href="#最后就是等待安装成功了，时间差不多该饮茶了。" class="headerlink" title="最后就是等待安装成功了，时间差不多该饮茶了。"></a>最后就是等待安装成功了，时间差不多该饮茶了。</h1><h2>输入密码后黑屏</h2>经过我搜集的资料，主要是因为同时有I卡和N卡造成的，需要安装N卡的闭源驱动，还是上面这位老哥的文章，写的非常详细：<a>https://bbs-next.deepin.org/post/198175</a>建议这篇文章和我的步骤结合着看。因为我还是跟他描述的不一样，而且这篇文章似乎没法看到图片，因此我才接着写下去。这篇文章里提到了通过临时方案进入图形界面（最少机子没出问题奥），然后是安装显卡驱动管理器，直接在应用商店下载（终于有图了！！）</li></ul><p><img src="https://img-blog.csdnimg.cn/20210618184954471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NrY3Jhenk5,size_16,color_FFFFFF,t_70#pic_center" alt="显卡驱动管理器"></p><p>然后打开是这样的</p><p><img src="https://img-blog.csdnimg.cn/20210618181252341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NrY3Jhenk5,size_16,color_FFFFFF,t_70#pic_center" alt="打开的样子"></p><p>注意，因为是黑屏的，打开以后选择闭源驱动（那片文章说的是用Intel的驱动，我这里没有这个选项，如果跟我情况一致就按我的做吧），确定以后应该就重启了，之后就会看到茶壶的动画，再打开就没事了。</p><p>关于v2ray的配置我会另写一篇文章。</p><p>最后，非常感谢deepin论坛上这位老哥文章，解决了很多的问题，另外本人能力、理解有限，如有错误还请各位高人指点。</p>]]></content>
    
    
    <summary type="html">解决win-deepin双系统环境下因为显卡驱动原因导致的黑屏</summary>
    
    
    
    <category term="linux" scheme="http://blog.hfuiao.top/categories/linux/"/>
    
    
    <category term="linux" scheme="http://blog.hfuiao.top/tags/linux/"/>
    
    <category term="deepin" scheme="http://blog.hfuiao.top/tags/deepin/"/>
    
    <category term="双系统" scheme="http://blog.hfuiao.top/tags/%E5%8F%8C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
